// AUTOGENERATED: b7a282ef8e244e84077fda04faf98905
// AUTOGENERATED: Please feel free to enhance this sourcecode manually
// AUTOGENERATED: (for example by adding more structure or convenience methods), and
// AUTOGENERATED: do not forget to remove this comment, especially the very first line so your changes are not overridden
package de.kalass.sonoscontrol.clingimpl.services;

import org.testng.Assert;
import org.testng.annotations.Test;

import de.kalass.sonoscontrol.api.control.SonosDevice;
import de.kalass.sonoscontrol.api.core.AsyncValue;
import de.kalass.sonoscontrol.api.model.contentdirectory.AlbumArtistDisplayOption;
import de.kalass.sonoscontrol.api.model.contentdirectory.Browseable;
import de.kalass.sonoscontrol.api.model.contentdirectory.ContainerUpdateIDs;
import de.kalass.sonoscontrol.api.model.contentdirectory.LastIndexChange;
import de.kalass.sonoscontrol.api.model.contentdirectory.RecentlyPlayedUpdateID;
import de.kalass.sonoscontrol.api.model.contentdirectory.SavedQueuesUpdateID;
import de.kalass.sonoscontrol.api.model.contentdirectory.SearchCapabilities;
import de.kalass.sonoscontrol.api.model.contentdirectory.ShareIndexInProgress;
import de.kalass.sonoscontrol.api.model.contentdirectory.ShareIndexLastError;
import de.kalass.sonoscontrol.api.model.contentdirectory.ShareListRefreshState;
import de.kalass.sonoscontrol.api.model.contentdirectory.ShareListUpdateID;
import de.kalass.sonoscontrol.api.model.contentdirectory.SortCapabilities;
import de.kalass.sonoscontrol.api.model.contentdirectory.SystemUpdateID;
import de.kalass.sonoscontrol.api.model.contentdirectory.UserRadioUpdateID;
import de.kalass.sonoscontrol.api.services.ContentDirectoryService;
import de.kalass.sonoscontrol.clingimpl.AbstractSonosServiceTest;

public class ContentDirectoryServiceTest extends AbstractSonosServiceTest<ContentDirectoryService> {

    @Override
    protected ContentDirectoryService extractService(SonosDevice device) {
        return device.getContentDirectoryService();
    }

    @Override
    protected String getServiceName() {
        return "ContentDirectoryService";
    }

    @Test
    public void testGetBrowseable() {
        final Browseable value = getService().getLastValueForBrowseable();
        // 09.01.2012 (KK): Always null on my system - probably ok?
        // Assert.assertNotNull(value);
        System.out.println("Got Browseable: " + value);
    }
    @Test
    public void testGetShareIndexLastError() {
        final ShareIndexLastError value = getService().getLastValueForShareIndexLastError();
        // 09.01.2012 (KK): Always null on my system - probably ok?
        // Assert.assertNotNull(value);
        System.out.println("Got ShareIndexLastError: " + value);
    }
    @Test
    public void testGetContainerUpdateIDs() {
        final ContainerUpdateIDs value = getService().getLastValueForContainerUpdateIDs();
        // 09.01.2012 (KK): Always null on my system - probably ok?
        // Assert.assertNotNull(value);
        System.out.println("Got ContainerUpdateIDs: " + value);
    }
    @Test
    public void testGetRecentlyPlayedUpdateID() {
        final RecentlyPlayedUpdateID value = getService().getLastValueForRecentlyPlayedUpdateID();
        // 09.01.2012 (KK): Always null on my system - probably ok?
        // Assert.assertNotNull(value);
        System.out.println("Got RecentlyPlayedUpdateID: " + value);
    }
    @Test
    public void testGetUserRadioUpdateID() {
        final UserRadioUpdateID value = getService().getLastValueForUserRadioUpdateID();
        // 09.01.2012 (KK): Always null on my system - probably ok?
        // Assert.assertNotNull(value);
        System.out.println("Got UserRadioUpdateID: " + value);
    }
    @Test
    public void testGetSavedQueuesUpdateID() {
        final SavedQueuesUpdateID value = getService().getLastValueForSavedQueuesUpdateID();
        // 09.01.2012 (KK): Always null on my system - probably ok?
        // Assert.assertNotNull(value);
        System.out.println("Got SavedQueuesUpdateID: " + value);
    }
    @Test
    public void testGetSystemUpdateID() {
        final SystemUpdateID value = getService().getLastValueForSystemUpdateID();
        // 09.01.2012 (KK): Always null on my system - probably ok?
        // Assert.assertNotNull(value);
        System.out.println("Got SystemUpdateID: " + value);
    }
    @Test
    public void testGetShareIndexInProgress() {
        final ShareIndexInProgress value = getService().getLastValueForShareIndexInProgress();
        // 09.01.2012 (KK): Always null on my system - probably ok?
        // Assert.assertNotNull(value);
        System.out.println("Got ShareIndexInProgress: " + value);
    }
    @Test
    public void testGetShareListRefreshState() {
        final ShareListRefreshState value = getService().getLastValueForShareListRefreshState();
        // 09.01.2012 (KK): Always null on my system - probably ok?
        // Assert.assertNotNull(value);
        System.out.println("Got ShareListRefreshState: " + value);
    }
    @Test
    public void testGetShareListUpdateID() {
        final ShareListUpdateID value = getService().getLastValueForShareListUpdateID();
        // 09.01.2012 (KK): Always null on my system - probably ok?
        // Assert.assertNotNull(value);
        System.out.println("Got ShareListUpdateID: " + value);
    }


    @Test
    public void retrieveSearchCapabilitiesTest() throws Exception{
        final SearchCapabilities value = getService().retrieveSearchCapabilities(new AsyncValue<SearchCapabilities>()).get();
        // 09.01.2012 (KK): Always null on my system - probably ok?
        //Assert.assertNotNull(value);
        System.out.println("Got retrieveSearchCapabilities: " + value);
    }

    @Test
    public void retrieveSortCapabilitiesTest() throws Exception{
        final SortCapabilities value = getService().retrieveSortCapabilities(new AsyncValue<SortCapabilities>()).get();
        // 09.01.2012 (KK): Always null on my system - probably ok?
        // Assert.assertNotNull(value);
        System.out.println("Got retrieveSortCapabilities: " + value);
    }

    @Test
    public void retrieveSystemUpdateIDTest() throws Exception{
        final SystemUpdateID value = getService().retrieveSystemUpdateID(new AsyncValue<SystemUpdateID>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveSystemUpdateID: " + value);
    }

    @Test
    public void retrieveAlbumArtistDisplayOptionTest() throws Exception{
        final AlbumArtistDisplayOption value = getService().retrieveAlbumArtistDisplayOption(new AsyncValue<AlbumArtistDisplayOption>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveAlbumArtistDisplayOption: " + value);
    }

    @Test
    public void retrieveLastIndexChangeTest() throws Exception{
        final LastIndexChange value = getService().retrieveLastIndexChange(new AsyncValue<LastIndexChange>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveLastIndexChange: " + value);
    }

    /*
    @Test
    public void browseTest() throws Exception{
        final BrowseResult value = getService().browse(objectID, browseFlag, filter, startingIndex, requestedCount, sortCriteria, new AsyncValue<BrowseResult>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got browse: " + value);
    }
     */

    /*
    @Test
    public void findPrefixTest() throws Exception{
        final FindPrefixResult value = getService().findPrefix(objectID, prefix, new AsyncValue<FindPrefixResult>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got findPrefix: " + value);
    }
     */

    /*
    @Test
    public void retrieveAllPrefixLocationsTest() throws Exception{
        final GetAllPrefixLocationsResult value = getService().retrieveAllPrefixLocations(objectID, new AsyncValue<GetAllPrefixLocationsResult>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveAllPrefixLocations: " + value);
    }
     */

    /*
    @Test
    public void createObjectTest() throws Exception{
        final CreateObjectResult value = getService().createObject(containerID, elements, new AsyncValue<CreateObjectResult>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got createObject: " + value);
    }
     */

    /*
    @Test
    public void updateObjectTest() throws Exception{
        getService().updateObject(objectID, currentTagValue, newTagValue, new VoidCallback()).waitForSuccess();
        System.out.println("Finished updateObject");
    }
     */

    /*
    @Test
    public void destroyObjectTest() throws Exception{
        getService().destroyObject(objectID, new VoidCallback()).waitForSuccess();
        System.out.println("Finished destroyObject");
    }
     */

    /*
    @Test
    public void refreshShareListTest() throws Exception{
        getService().refreshShareList(new VoidCallback()).waitForSuccess();
        System.out.println("Finished refreshShareList");
    }
     */

    /*
    @Test
    public void refreshShareIndexTest() throws Exception{
        getService().refreshShareIndex(albumArtistDisplayOption, new VoidCallback()).waitForSuccess();
        System.out.println("Finished refreshShareIndex");
    }
     */

    /*
    @Test
    public void requestResortTest() throws Exception{
        getService().requestResort(sortOrder, new VoidCallback()).waitForSuccess();
        System.out.println("Finished requestResort");
    }
     */

    @Test
    public void retrieveShareIndexInProgressTest() throws Exception{
        final ShareIndexInProgress value = getService().retrieveShareIndexInProgress(new AsyncValue<ShareIndexInProgress>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveShareIndexInProgress: " + value);
    }

    @Test
    public void retrieveBrowseableTest() throws Exception{
        final Browseable value = getService().retrieveBrowseable(new AsyncValue<Browseable>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveBrowseable: " + value);
    }

    /*
    @Test
    public void setBrowseableTest() throws Exception{
        getService().setBrowseable(browseable, new VoidCallback()).waitForSuccess();
        System.out.println("Finished setBrowseable");
    }
     */
}

