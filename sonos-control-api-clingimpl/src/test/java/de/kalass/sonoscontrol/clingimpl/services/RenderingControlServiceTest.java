// AUTOGENERATED: 4a8568970f4e8c207125a7c753d9d9bd
// AUTOGENERATED: Please feel free to enhance this sourcecode manually 
// AUTOGENERATED: (for example by adding more structure or convenience methods), and
// AUTOGENERATED: do not forget to remove this comment, especially the very first line so your changes are not overridden
package de.kalass.sonoscontrol.clingimpl.services;

import de.kalass.sonoscontrol.api.services.RenderingControlService;
import org.testng.Assert;
import org.testng.annotations.Test;

import de.kalass.sonoscontrol.api.core.VoidCallback;
import de.kalass.sonoscontrol.api.core.AsyncValue;
import de.kalass.sonoscontrol.api.control.SonosDevice;
import de.kalass.sonoscontrol.clingimpl.AbstractSonosServiceTest;

import de.kalass.sonoscontrol.api.core.Callback0;
import de.kalass.sonoscontrol.api.core.Callback1;
import de.kalass.sonoscontrol.api.model.renderingcontrol.Mute;
import de.kalass.sonoscontrol.api.model.renderingcontrol.ResetBasicEQResult;
import de.kalass.sonoscontrol.api.model.renderingcontrol.Volume;
import de.kalass.sonoscontrol.api.model.renderingcontrol.VolumeDB;
import de.kalass.sonoscontrol.api.model.renderingcontrol.GetVolumeDBRangeResult;
import de.kalass.sonoscontrol.api.model.renderingcontrol.Bass;
import de.kalass.sonoscontrol.api.model.renderingcontrol.Treble;
import de.kalass.sonoscontrol.api.model.renderingcontrol.EQValue;
import de.kalass.sonoscontrol.api.model.renderingcontrol.Loudness;
import de.kalass.sonoscontrol.api.model.renderingcontrol.SupportsOutputFixed;
import de.kalass.sonoscontrol.api.model.renderingcontrol.OutputFixed;
import de.kalass.sonoscontrol.api.model.renderingcontrol.HeadphoneConnected;
import de.kalass.sonoscontrol.api.model.renderingcontrol.RampTimeSeconds;
import de.kalass.sonoscontrol.api.model.renderingcontrol.RampType;
import de.kalass.sonoscontrol.api.model.renderingcontrol.VolumeAdjustment;
import de.kalass.sonoscontrol.api.model.renderingcontrol.RightVolume;
import de.kalass.sonoscontrol.api.model.renderingcontrol.MuteChannel;
import de.kalass.sonoscontrol.api.model.InstanceID;
import de.kalass.sonoscontrol.api.model.renderingcontrol.LeftVolume;
import de.kalass.sonoscontrol.api.model.renderingcontrol.ProgramURI;
import de.kalass.sonoscontrol.api.model.renderingcontrol.EQType;
import de.kalass.sonoscontrol.api.model.renderingcontrol.ResetVolumeAfter;
import de.kalass.sonoscontrol.api.model.renderingcontrol.ChannelMap;
import de.kalass.sonoscontrol.api.model.renderingcontrol.Channel;
import de.kalass.sonoscontrol.api.model.renderingcontrol.LastChange;

public class RenderingControlServiceTest extends AbstractSonosServiceTest<RenderingControlService> {

    @Override
    protected RenderingControlService extractService(SonosDevice device) {
        return device.getRenderingControlService();
    }

  @Override
    protected String getServiceName() {
        return "RenderingControlService";
    }
    
    @Test
    public void testGetLastChange() {
        final LastChange value = getService().getLastValueForLastChange();
        Assert.assertNotNull(value);
        System.out.println("Got LastChange: " + value);
    }


    /*
    @Test
    public void retrieveMuteTest() throws Exception{
        final Mute value = getService().retrieveMute(channel, new AsyncValue<Mute>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveMute: " + value);
    }
    */

    /*
    @Test
    public void setMuteTest() throws Exception{
        getService().setMute(channel, desiredMute, new VoidCallback()).waitForSuccess();
        System.out.println("Finished setMute");
    }
    */

    @Test
    public void resetBasicEQTest() throws Exception{
        final ResetBasicEQResult value = getService().resetBasicEQ(new AsyncValue<ResetBasicEQResult>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got resetBasicEQ: " + value);
    }

    /*
    @Test
    public void resetExtEQTest() throws Exception{
        getService().resetExtEQ(eQType, new VoidCallback()).waitForSuccess();
        System.out.println("Finished resetExtEQ");
    }
    */

    /*
    @Test
    public void retrieveVolumeTest() throws Exception{
        final Volume value = getService().retrieveVolume(channel, new AsyncValue<Volume>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveVolume: " + value);
    }
    */

    /*
    @Test
    public void setVolumeTest() throws Exception{
        getService().setVolume(channel, desiredVolume, new VoidCallback()).waitForSuccess();
        System.out.println("Finished setVolume");
    }
    */

    /*
    @Test
    public void setRelativeVolumeTest() throws Exception{
        final Volume value = getService().setRelativeVolume(channel, adjustment, new AsyncValue<Volume>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got setRelativeVolume: " + value);
    }
    */

    /*
    @Test
    public void retrieveVolumeDBTest() throws Exception{
        final VolumeDB value = getService().retrieveVolumeDB(channel, new AsyncValue<VolumeDB>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveVolumeDB: " + value);
    }
    */

    /*
    @Test
    public void setVolumeDBTest() throws Exception{
        getService().setVolumeDB(channel, desiredVolume, new VoidCallback()).waitForSuccess();
        System.out.println("Finished setVolumeDB");
    }
    */

    /*
    @Test
    public void retrieveVolumeDBRangeTest() throws Exception{
        final GetVolumeDBRangeResult value = getService().retrieveVolumeDBRange(channel, new AsyncValue<GetVolumeDBRangeResult>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveVolumeDBRange: " + value);
    }
    */

    @Test
    public void retrieveBassTest() throws Exception{
        final Bass value = getService().retrieveBass(new AsyncValue<Bass>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveBass: " + value);
    }

    /*
    @Test
    public void setBassTest() throws Exception{
        getService().setBass(desiredBass, new VoidCallback()).waitForSuccess();
        System.out.println("Finished setBass");
    }
    */

    @Test
    public void retrieveTrebleTest() throws Exception{
        final Treble value = getService().retrieveTreble(new AsyncValue<Treble>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveTreble: " + value);
    }

    /*
    @Test
    public void setTrebleTest() throws Exception{
        getService().setTreble(desiredTreble, new VoidCallback()).waitForSuccess();
        System.out.println("Finished setTreble");
    }
    */

    /*
    @Test
    public void retrieveEQTest() throws Exception{
        final EQValue value = getService().retrieveEQ(eQType, new AsyncValue<EQValue>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveEQ: " + value);
    }
    */

    /*
    @Test
    public void setEQTest() throws Exception{
        getService().setEQ(eQType, desiredValue, new VoidCallback()).waitForSuccess();
        System.out.println("Finished setEQ");
    }
    */

    /*
    @Test
    public void retrieveLoudnessTest() throws Exception{
        final Loudness value = getService().retrieveLoudness(channel, new AsyncValue<Loudness>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveLoudness: " + value);
    }
    */

    /*
    @Test
    public void setLoudnessTest() throws Exception{
        getService().setLoudness(channel, desiredLoudness, new VoidCallback()).waitForSuccess();
        System.out.println("Finished setLoudness");
    }
    */

    @Test
    public void retrieveSupportsOutputFixedTest() throws Exception{
        final SupportsOutputFixed value = getService().retrieveSupportsOutputFixed(new AsyncValue<SupportsOutputFixed>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveSupportsOutputFixed: " + value);
    }

    @Test
    public void retrieveOutputFixedTest() throws Exception{
        final OutputFixed value = getService().retrieveOutputFixed(new AsyncValue<OutputFixed>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveOutputFixed: " + value);
    }

    /*
    @Test
    public void setOutputFixedTest() throws Exception{
        getService().setOutputFixed(desiredFixed, new VoidCallback()).waitForSuccess();
        System.out.println("Finished setOutputFixed");
    }
    */

    @Test
    public void retrieveHeadphoneConnectedTest() throws Exception{
        final HeadphoneConnected value = getService().retrieveHeadphoneConnected(new AsyncValue<HeadphoneConnected>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveHeadphoneConnected: " + value);
    }

    /*
    @Test
    public void rampToVolumeTest() throws Exception{
        final RampTimeSeconds value = getService().rampToVolume(channel, rampType, desiredVolume, resetVolumeAfter, programURI, new AsyncValue<RampTimeSeconds>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got rampToVolume: " + value);
    }
    */

    /*
    @Test
    public void restoreVolumePriorToRampTest() throws Exception{
        getService().restoreVolumePriorToRamp(channel, new VoidCallback()).waitForSuccess();
        System.out.println("Finished restoreVolumePriorToRamp");
    }
    */

    /*
    @Test
    public void setChannelMapTest() throws Exception{
        getService().setChannelMap(channelMap, new VoidCallback()).waitForSuccess();
        System.out.println("Finished setChannelMap");
    }
    */
}

