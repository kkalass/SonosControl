// AUTOGENERATED: 8898a246c04b2c1b2cb33d3ff15f25e1
// AUTOGENERATED: Please feel free to enhance this sourcecode manually 
// AUTOGENERATED: (for example by adding more structure or convenience methods), and
// AUTOGENERATED: do not forget to remove this comment, especially the very first line so your changes are not overridden
package de.kalass.sonoscontrol.clingimpl.services;

import de.kalass.sonoscontrol.api.services.AlarmClockService;
import org.testng.Assert;
import org.testng.annotations.Test;

import de.kalass.sonoscontrol.api.core.VoidCallback;
import de.kalass.sonoscontrol.api.core.AsyncValue;
import de.kalass.sonoscontrol.api.control.SonosDevice;
import de.kalass.sonoscontrol.clingimpl.AbstractSonosServiceTest;

import de.kalass.sonoscontrol.api.core.Callback0;
import de.kalass.sonoscontrol.api.core.Callback1;
import de.kalass.sonoscontrol.api.model.alarmclock.GetFormatResult;
import de.kalass.sonoscontrol.api.model.alarmclock.GetTimeZoneResult;
import de.kalass.sonoscontrol.api.model.alarmclock.GetTimeZoneAndRuleResult;
import de.kalass.sonoscontrol.api.model.alarmclock.TimeZone;
import de.kalass.sonoscontrol.api.model.alarmclock.TimeServer;
import de.kalass.sonoscontrol.api.model.alarmclock.ISO8601Time;
import de.kalass.sonoscontrol.api.model.alarmclock.GetTimeNowResult;
import de.kalass.sonoscontrol.api.model.alarmclock.AlarmID;
import de.kalass.sonoscontrol.api.model.alarmclock.ListAlarmsResult;
import de.kalass.sonoscontrol.api.model.alarmclock.DailyIndexRefreshTime;
import de.kalass.sonoscontrol.api.model.alarmclock.AlarmRoomUUID;
import de.kalass.sonoscontrol.api.model.alarmclock.TimeZoneInformation;
import de.kalass.sonoscontrol.api.model.alarmclock.AlarmIncludeLinkedZones;
import de.kalass.sonoscontrol.api.model.alarmclock.TimeGeneration;
import de.kalass.sonoscontrol.api.model.alarmclock.Recurrence;
import de.kalass.sonoscontrol.api.model.alarmclock.AlarmListVersion;
import de.kalass.sonoscontrol.api.model.alarmclock.AlarmEnabled;
import de.kalass.sonoscontrol.api.model.alarmclock.AlarmProgramMetaData;
import de.kalass.sonoscontrol.api.model.alarmclock.TimeStamp;
import de.kalass.sonoscontrol.api.model.alarmclock.AlarmVolume;
import de.kalass.sonoscontrol.api.model.alarmclock.DateFormat;
import de.kalass.sonoscontrol.api.model.alarmclock.AlarmList;
import de.kalass.sonoscontrol.api.model.alarmclock.AlarmProgramURI;
import de.kalass.sonoscontrol.api.model.alarmclock.TimeZoneAutoAdjustDst;
import de.kalass.sonoscontrol.api.model.alarmclock.AlarmPlayMode;
import de.kalass.sonoscontrol.api.model.alarmclock.TimeZoneIndex;
import de.kalass.sonoscontrol.api.model.alarmclock.TimeFormat;

public class AlarmClockServiceTest extends AbstractSonosServiceTest<AlarmClockService> {

    @Override
    protected AlarmClockService extractService(SonosDevice device) {
        return device.getAlarmClockService();
    }

  @Override
    protected String getServiceName() {
        return "AlarmClockService";
    }
    
    @Test
    public void testGetTimeGeneration() {
        final TimeGeneration value = getService().getLastValueForTimeGeneration();
        Assert.assertNotNull(value);
        System.out.println("Got TimeGeneration: " + value);
    }
    @Test
    public void testGetAlarmListVersion() {
        final AlarmListVersion value = getService().getLastValueForAlarmListVersion();
        Assert.assertNotNull(value);
        System.out.println("Got AlarmListVersion: " + value);
    }
    @Test
    public void testGetDateFormat() {
        final DateFormat value = getService().getLastValueForDateFormat();
        Assert.assertNotNull(value);
        System.out.println("Got DateFormat: " + value);
    }
    @Test
    public void testGetTimeServer() {
        final TimeServer value = getService().getLastValueForTimeServer();
        Assert.assertNotNull(value);
        System.out.println("Got TimeServer: " + value);
    }
    @Test
    public void testGetTimeZone() {
        final TimeZone value = getService().getLastValueForTimeZone();
        Assert.assertNotNull(value);
        System.out.println("Got TimeZone: " + value);
    }
    @Test
    public void testGetTimeFormat() {
        final TimeFormat value = getService().getLastValueForTimeFormat();
        Assert.assertNotNull(value);
        System.out.println("Got TimeFormat: " + value);
    }
    @Test
    public void testGetDailyIndexRefreshTime() {
        final DailyIndexRefreshTime value = getService().getLastValueForDailyIndexRefreshTime();
        Assert.assertNotNull(value);
        System.out.println("Got DailyIndexRefreshTime: " + value);
    }


    /*
    @Test
    public void setFormatTest() throws Exception{
        getService().setFormat(desiredTimeFormat, desiredDateFormat, new VoidCallback()).waitForSuccess();
        System.out.println("Finished setFormat");
    }
    */

    @Test
    public void retrieveFormatTest() throws Exception{
        final GetFormatResult value = getService().retrieveFormat(new AsyncValue<GetFormatResult>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveFormat: " + value);
    }

    /*
    @Test
    public void setTimeZoneTest() throws Exception{
        getService().setTimeZone(index, autoAdjustDst, new VoidCallback()).waitForSuccess();
        System.out.println("Finished setTimeZone");
    }
    */

    @Test
    public void retrieveTimeZoneTest() throws Exception{
        final GetTimeZoneResult value = getService().retrieveTimeZone(new AsyncValue<GetTimeZoneResult>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveTimeZone: " + value);
    }

    @Test
    public void retrieveTimeZoneAndRuleTest() throws Exception{
        final GetTimeZoneAndRuleResult value = getService().retrieveTimeZoneAndRule(new AsyncValue<GetTimeZoneAndRuleResult>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveTimeZoneAndRule: " + value);
    }

    /*
    @Test
    public void retrieveTimeZoneRuleTest() throws Exception{
        final TimeZone value = getService().retrieveTimeZoneRule(index, new AsyncValue<TimeZone>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveTimeZoneRule: " + value);
    }
    */

    /*
    @Test
    public void setTimeServerTest() throws Exception{
        getService().setTimeServer(desiredTimeServer, new VoidCallback()).waitForSuccess();
        System.out.println("Finished setTimeServer");
    }
    */

    @Test
    public void retrieveTimeServerTest() throws Exception{
        final TimeServer value = getService().retrieveTimeServer(new AsyncValue<TimeServer>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveTimeServer: " + value);
    }

    /*
    @Test
    public void setTimeNowTest() throws Exception{
        getService().setTimeNow(desiredTime, timeZoneForDesiredTime, new VoidCallback()).waitForSuccess();
        System.out.println("Finished setTimeNow");
    }
    */

    /*
    @Test
    public void retrieveHouseholdTimeAtStampTest() throws Exception{
        final ISO8601Time value = getService().retrieveHouseholdTimeAtStamp(timeStamp, new AsyncValue<ISO8601Time>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveHouseholdTimeAtStamp: " + value);
    }
    */

    @Test
    public void retrieveTimeNowTest() throws Exception{
        final GetTimeNowResult value = getService().retrieveTimeNow(new AsyncValue<GetTimeNowResult>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveTimeNow: " + value);
    }

    /*
    @Test
    public void createAlarmTest() throws Exception{
        final AlarmID value = getService().createAlarm(startLocalTime, duration, recurrence, enabled, roomUUID, programURI, programMetaData, playMode, volume, includeLinkedZones, new AsyncValue<AlarmID>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got createAlarm: " + value);
    }
    */

    /*
    @Test
    public void updateAlarmTest() throws Exception{
        getService().updateAlarm(iD, startLocalTime, duration, recurrence, enabled, roomUUID, programURI, programMetaData, playMode, volume, includeLinkedZones, new VoidCallback()).waitForSuccess();
        System.out.println("Finished updateAlarm");
    }
    */

    /*
    @Test
    public void destroyAlarmTest() throws Exception{
        getService().destroyAlarm(iD, new VoidCallback()).waitForSuccess();
        System.out.println("Finished destroyAlarm");
    }
    */

    @Test
    public void listAlarmsTest() throws Exception{
        final ListAlarmsResult value = getService().listAlarms(new AsyncValue<ListAlarmsResult>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got listAlarms: " + value);
    }

    /*
    @Test
    public void setDailyIndexRefreshTimeTest() throws Exception{
        getService().setDailyIndexRefreshTime(desiredDailyIndexRefreshTime, new VoidCallback()).waitForSuccess();
        System.out.println("Finished setDailyIndexRefreshTime");
    }
    */

    @Test
    public void retrieveDailyIndexRefreshTimeTest() throws Exception{
        final DailyIndexRefreshTime value = getService().retrieveDailyIndexRefreshTime(new AsyncValue<DailyIndexRefreshTime>()).get();
        Assert.assertNotNull(value);
        System.out.println("Got retrieveDailyIndexRefreshTime: " + value);
    }
}

