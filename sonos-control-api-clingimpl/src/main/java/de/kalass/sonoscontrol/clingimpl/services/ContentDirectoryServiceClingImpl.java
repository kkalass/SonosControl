// AUTOGENERATED: 2185039afb10c8ff17f45a7d9359e57f
// AUTOGENERATED: Please feel free to enhance this sourcecode manually 
// AUTOGENERATED: (for example by adding more structure or convenience methods), and
// AUTOGENERATED: do not forget to remove this comment, especially the very first line so your changes are not overridden
package de.kalass.sonoscontrol.clingimpl.services;

import de.kalass.sonoscontrol.api.services.ContentDirectoryService;
import de.kalass.sonoscontrol.api.core.EventListener;

import org.fourthline.cling.model.gena.GENASubscription;
import org.fourthline.cling.model.action.ActionArgumentValue;
import org.fourthline.cling.UpnpService;
import org.fourthline.cling.model.action.ActionInvocation;
import org.fourthline.cling.model.meta.Device;
import org.fourthline.cling.model.types.InvalidValueException;
import org.fourthline.cling.model.types.UnsignedIntegerFourBytes;
import org.fourthline.cling.model.state.StateVariableValue;

import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CountDownLatch;

import com.google.common.base.Objects;

import de.kalass.sonoscontrol.api.core.ErrorStrategy;

import de.kalass.sonoscontrol.clingimpl.services.AbstractServiceImpl;

import de.kalass.sonoscontrol.api.core.Callback0;
import de.kalass.sonoscontrol.api.core.Callback1;
import de.kalass.sonoscontrol.api.model.contentdirectory.SearchCapabilities;
import de.kalass.sonoscontrol.api.model.contentdirectory.SortCapabilities;
import de.kalass.sonoscontrol.api.model.contentdirectory.SystemUpdateID;
import de.kalass.sonoscontrol.api.model.contentdirectory.AlbumArtistDisplayOption;
import de.kalass.sonoscontrol.api.model.contentdirectory.LastIndexChange;
import de.kalass.sonoscontrol.api.model.contentdirectory.BrowseResult;
import de.kalass.sonoscontrol.api.model.contentdirectory.FindPrefixResult;
import de.kalass.sonoscontrol.api.model.contentdirectory.GetAllPrefixLocationsResult;
import de.kalass.sonoscontrol.api.model.contentdirectory.CreateObjectResult;
import de.kalass.sonoscontrol.api.model.contentdirectory.ShareIndexInProgress;
import de.kalass.sonoscontrol.api.model.contentdirectory.Browseable;
import de.kalass.sonoscontrol.api.model.contentdirectory.BrowseFlag;
import de.kalass.sonoscontrol.api.model.contentdirectory.ShareIndexLastError;
import de.kalass.sonoscontrol.api.model.contentdirectory.SearchCriteria;
import de.kalass.sonoscontrol.api.model.contentdirectory.ContainerUpdateIDs;
import de.kalass.sonoscontrol.api.model.contentdirectory.RecentlyPlayedUpdateID;
import de.kalass.sonoscontrol.api.model.contentdirectory.TagValueList;
import de.kalass.sonoscontrol.api.model.contentdirectory.ObjectID;
import de.kalass.sonoscontrol.api.model.contentdirectory.UserRadioUpdateID;
import de.kalass.sonoscontrol.api.model.contentdirectory.SavedQueuesUpdateID;
import de.kalass.sonoscontrol.api.model.contentdirectory.Prefix;
import de.kalass.sonoscontrol.api.model.contentdirectory.Count;
import de.kalass.sonoscontrol.api.model.contentdirectory.Index;
import de.kalass.sonoscontrol.api.model.contentdirectory.Result;
import de.kalass.sonoscontrol.api.model.contentdirectory.SortOrder;
import de.kalass.sonoscontrol.api.model.contentdirectory.Filter;
import de.kalass.sonoscontrol.api.model.contentdirectory.ShareListRefreshState;
import de.kalass.sonoscontrol.api.model.contentdirectory.SortCriteria;
import de.kalass.sonoscontrol.api.model.contentdirectory.ShareListUpdateID;
import de.kalass.sonoscontrol.api.model.contentdirectory.UpdateID;

@SuppressWarnings("rawtypes")
public final class ContentDirectoryServiceClingImpl extends AbstractServiceImpl implements ContentDirectoryService {
    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(ContentDirectoryServiceClingImpl.class);
    
    private final List<EventListener<Browseable>> _changeBrowseableListeners = new ArrayList<EventListener<Browseable>>();
    private final List<EventListener<ShareIndexLastError>> _changeShareIndexLastErrorListeners = new ArrayList<EventListener<ShareIndexLastError>>();
    private final List<EventListener<ContainerUpdateIDs>> _changeContainerUpdateIDsListeners = new ArrayList<EventListener<ContainerUpdateIDs>>();
    private final List<EventListener<RecentlyPlayedUpdateID>> _changeRecentlyPlayedUpdateIDListeners = new ArrayList<EventListener<RecentlyPlayedUpdateID>>();
    private final List<EventListener<UserRadioUpdateID>> _changeUserRadioUpdateIDListeners = new ArrayList<EventListener<UserRadioUpdateID>>();
    private final List<EventListener<SavedQueuesUpdateID>> _changeSavedQueuesUpdateIDListeners = new ArrayList<EventListener<SavedQueuesUpdateID>>();
    private final List<EventListener<SystemUpdateID>> _changeSystemUpdateIDListeners = new ArrayList<EventListener<SystemUpdateID>>();
    private final List<EventListener<ShareIndexInProgress>> _changeShareIndexInProgressListeners = new ArrayList<EventListener<ShareIndexInProgress>>();
    private final List<EventListener<ShareListRefreshState>> _changeShareListRefreshStateListeners = new ArrayList<EventListener<ShareListRefreshState>>();
    private final List<EventListener<ShareListUpdateID>> _changeShareListUpdateIDListeners = new ArrayList<EventListener<ShareListUpdateID>>();

    public ContentDirectoryServiceClingImpl(UpnpService upnpService, Device device, ErrorStrategy errorStrategy) {
        super("ContentDirectory", upnpService, device, errorStrategy);
    }


    public <C extends Callback1<SearchCapabilities>> C retrieveSearchCapabilities(final C successHandler) {
        return execute(successHandler, new Call<C>("GetSearchCapabilities") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                 assert invocation.getOutput().length == 1;
                 final ActionArgumentValue[] output = invocation.getOutput();
                 final SearchCapabilities value = SearchCapabilities.getInstance((String)getValue("string",output[0].getValue()));
                 handler.success(value);
            }
        });
    }

    public <C extends Callback1<SortCapabilities>> C retrieveSortCapabilities(final C successHandler) {
        return execute(successHandler, new Call<C>("GetSortCapabilities") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                 assert invocation.getOutput().length == 1;
                 final ActionArgumentValue[] output = invocation.getOutput();
                 final SortCapabilities value = SortCapabilities.getInstance((String)getValue("string",output[0].getValue()));
                 handler.success(value);
            }
        });
    }

    public <C extends Callback1<SystemUpdateID>> C retrieveSystemUpdateID(final C successHandler) {
        return execute(successHandler, new Call<C>("GetSystemUpdateID") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                 assert invocation.getOutput().length == 1;
                 final ActionArgumentValue[] output = invocation.getOutput();
                 final SystemUpdateID value = SystemUpdateID.getInstance((Long)getValue("ui4",output[0].getValue()));
                 handler.success(value);
            }
        });
    }

    public <C extends Callback1<AlbumArtistDisplayOption>> C retrieveAlbumArtistDisplayOption(final C successHandler) {
        return execute(successHandler, new Call<C>("GetAlbumArtistDisplayOption") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                 assert invocation.getOutput().length == 1;
                 final ActionArgumentValue[] output = invocation.getOutput();
                 final AlbumArtistDisplayOption value = AlbumArtistDisplayOption.getInstance((String)getValue("string",output[0].getValue()));
                 handler.success(value);
            }
        });
    }

    public <C extends Callback1<LastIndexChange>> C retrieveLastIndexChange(final C successHandler) {
        return execute(successHandler, new Call<C>("GetLastIndexChange") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                 assert invocation.getOutput().length == 1;
                 final ActionArgumentValue[] output = invocation.getOutput();
                 final LastIndexChange value = LastIndexChange.getInstance((String)getValue("string",output[0].getValue()));
                 handler.success(value);
            }
        });
    }

    public <C extends Callback1<BrowseResult>> C browse(final ObjectID objectID, final BrowseFlag browseFlag, final Filter filter, final Index startingIndex, final Count requestedCount, final SortCriteria sortCriteria, final C successHandler) {
        return execute(successHandler, new Call<C>("Browse") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
                setInput(invocation,"string", "ObjectID", objectID == null ? null : objectID.getValue());
                setInput(invocation,"string", "BrowseFlag", browseFlag == null ? null : browseFlag.getValue());
                setInput(invocation,"string", "Filter", filter == null ? null : filter.getValue());
                setInput(invocation,"ui4", "StartingIndex", startingIndex == null ? null : startingIndex.getValue());
                setInput(invocation,"ui4", "RequestedCount", requestedCount == null ? null : requestedCount.getValue());
                setInput(invocation,"string", "SortCriteria", sortCriteria == null ? null : sortCriteria.getValue());
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                final ActionArgumentValue[] output = invocation.getOutput();
                final Result result = Result.getInstance((String)getValue("string",output[0].getValue()));
                final Count numberReturned = Count.getInstance((Long)getValue("ui4",output[1].getValue()));
                final Count totalMatches = Count.getInstance((Long)getValue("ui4",output[2].getValue()));
                final UpdateID updateID = UpdateID.getInstance((Long)getValue("ui4",output[3].getValue()));
                final BrowseResult value = BrowseResult.getInstance(result,numberReturned,totalMatches,updateID);
                handler.success(value);
            }
        });
    }

    public <C extends Callback1<FindPrefixResult>> C findPrefix(final ObjectID objectID, final Prefix prefix, final C successHandler) {
        return execute(successHandler, new Call<C>("FindPrefix") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
                setInput(invocation,"string", "ObjectID", objectID == null ? null : objectID.getValue());
                setInput(invocation,"string", "Prefix", prefix == null ? null : prefix.getValue());
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                final ActionArgumentValue[] output = invocation.getOutput();
                final Index startingIndex = Index.getInstance((Long)getValue("ui4",output[0].getValue()));
                final UpdateID updateID = UpdateID.getInstance((Long)getValue("ui4",output[1].getValue()));
                final FindPrefixResult value = FindPrefixResult.getInstance(startingIndex,updateID);
                handler.success(value);
            }
        });
    }

    public <C extends Callback1<GetAllPrefixLocationsResult>> C retrieveAllPrefixLocations(final ObjectID objectID, final C successHandler) {
        return execute(successHandler, new Call<C>("GetAllPrefixLocations") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
                setInput(invocation,"string", "ObjectID", objectID == null ? null : objectID.getValue());
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                final ActionArgumentValue[] output = invocation.getOutput();
                final Count totalPrefixes = Count.getInstance((Long)getValue("ui4",output[0].getValue()));
                final Result prefixAndIndexCSV = Result.getInstance((String)getValue("string",output[1].getValue()));
                final UpdateID updateID = UpdateID.getInstance((Long)getValue("ui4",output[2].getValue()));
                final GetAllPrefixLocationsResult value = GetAllPrefixLocationsResult.getInstance(totalPrefixes,prefixAndIndexCSV,updateID);
                handler.success(value);
            }
        });
    }

    public <C extends Callback1<CreateObjectResult>> C createObject(final ObjectID containerID, final Result elements, final C successHandler) {
        return execute(successHandler, new Call<C>("CreateObject") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
                setInput(invocation,"string", "ContainerID", containerID == null ? null : containerID.getValue());
                setInput(invocation,"string", "Elements", elements == null ? null : elements.getValue());
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                final ActionArgumentValue[] output = invocation.getOutput();
                final ObjectID objectID = ObjectID.getInstance((String)getValue("string",output[0].getValue()));
                final Result result = Result.getInstance((String)getValue("string",output[1].getValue()));
                final CreateObjectResult value = CreateObjectResult.getInstance(objectID,result);
                handler.success(value);
            }
        });
    }

    public <C extends Callback0> C updateObject(final ObjectID objectID, final TagValueList currentTagValue, final TagValueList newTagValue, final C successHandler) {
        return execute(successHandler, new Call<C>("UpdateObject") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
                setInput(invocation,"string", "ObjectID", objectID == null ? null : objectID.getValue());
                setInput(invocation,"string", "CurrentTagValue", currentTagValue == null ? null : currentTagValue.getValue());
                setInput(invocation,"string", "NewTagValue", newTagValue == null ? null : newTagValue.getValue());
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                // no return values
                handler.success();
            }
        });
    }

    public <C extends Callback0> C destroyObject(final ObjectID objectID, final C successHandler) {
        return execute(successHandler, new Call<C>("DestroyObject") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
                setInput(invocation,"string", "ObjectID", objectID == null ? null : objectID.getValue());
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                // no return values
                handler.success();
            }
        });
    }

    public <C extends Callback0> C refreshShareList(final C successHandler) {
        return execute(successHandler, new Call<C>("RefreshShareList") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                // no return values
                handler.success();
            }
        });
    }

    public <C extends Callback0> C refreshShareIndex(final AlbumArtistDisplayOption albumArtistDisplayOption, final C successHandler) {
        return execute(successHandler, new Call<C>("RefreshShareIndex") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
                setInput(invocation,"string", "AlbumArtistDisplayOption", albumArtistDisplayOption == null ? null : albumArtistDisplayOption.getValue());
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                // no return values
                handler.success();
            }
        });
    }

    public <C extends Callback0> C requestResort(final SortOrder sortOrder, final C successHandler) {
        return execute(successHandler, new Call<C>("RequestResort") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
                setInput(invocation,"string", "SortOrder", sortOrder == null ? null : sortOrder.getValue());
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                // no return values
                handler.success();
            }
        });
    }

    public <C extends Callback1<ShareIndexInProgress>> C retrieveShareIndexInProgress(final C successHandler) {
        return execute(successHandler, new Call<C>("GetShareIndexInProgress") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                 assert invocation.getOutput().length == 1;
                 final ActionArgumentValue[] output = invocation.getOutput();
                 final ShareIndexInProgress value = ShareIndexInProgress.getInstance((Boolean)getValue("boolean",output[0].getValue()));
                 handler.success(value);
            }
        });
    }

    public <C extends Callback1<Browseable>> C retrieveBrowseable(final C successHandler) {
        return execute(successHandler, new Call<C>("GetBrowseable") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                 assert invocation.getOutput().length == 1;
                 final ActionArgumentValue[] output = invocation.getOutput();
                 final Browseable value = Browseable.getInstance((Boolean)getValue("boolean",output[0].getValue()));
                 handler.success(value);
            }
        });
    }

    public <C extends Callback0> C setBrowseable(final Browseable browseable, final C successHandler) {
        return execute(successHandler, new Call<C>("SetBrowseable") {
            @Override
            public void prepareArguments(ActionInvocation invocation)
                    throws InvalidValueException {
                // Throws InvalidValueException if the value is of wrong type
                setInput(invocation,"boolean", "Browseable", browseable == null ? null : browseable.getValue());
            }
            @Override
            public void success(C handler, ActionInvocation invocation) {
                // no return values
                handler.success();
            }
        });
    }

    protected void eventReceived(GENASubscription subscription) {
        final Map values = subscription.getCurrentValues();
        final Map<String, Object> stored = getStoredValues();


        Browseable newBrowseable = null;
        Browseable oldBrowseable = (Browseable)stored.get("Browseable");
        try {
            newBrowseable = convertBrowseable((Boolean)getValue("boolean", values.get("Browseable")));
        } catch(RuntimeException e) {
            LOG.error("failed to read new value for Browseable, will ignore", e);
            // make sure the value is not changed/overridden
            newBrowseable = null;
            oldBrowseable = null;
        }
        if (!Objects.equal(oldBrowseable, newBrowseable)) {
            stored.put("Browseable", newBrowseable);
        }

        ShareIndexLastError newShareIndexLastError = null;
        ShareIndexLastError oldShareIndexLastError = (ShareIndexLastError)stored.get("ShareIndexLastError");
        try {
            newShareIndexLastError = convertShareIndexLastError((String)getValue("string", values.get("ShareIndexLastError")));
        } catch(RuntimeException e) {
            LOG.error("failed to read new value for ShareIndexLastError, will ignore", e);
            // make sure the value is not changed/overridden
            newShareIndexLastError = null;
            oldShareIndexLastError = null;
        }
        if (!Objects.equal(oldShareIndexLastError, newShareIndexLastError)) {
            stored.put("ShareIndexLastError", newShareIndexLastError);
        }

        ContainerUpdateIDs newContainerUpdateIDs = null;
        ContainerUpdateIDs oldContainerUpdateIDs = (ContainerUpdateIDs)stored.get("ContainerUpdateIDs");
        try {
            newContainerUpdateIDs = convertContainerUpdateIDs((String)getValue("string", values.get("ContainerUpdateIDs")));
        } catch(RuntimeException e) {
            LOG.error("failed to read new value for ContainerUpdateIDs, will ignore", e);
            // make sure the value is not changed/overridden
            newContainerUpdateIDs = null;
            oldContainerUpdateIDs = null;
        }
        if (!Objects.equal(oldContainerUpdateIDs, newContainerUpdateIDs)) {
            stored.put("ContainerUpdateIDs", newContainerUpdateIDs);
        }

        RecentlyPlayedUpdateID newRecentlyPlayedUpdateID = null;
        RecentlyPlayedUpdateID oldRecentlyPlayedUpdateID = (RecentlyPlayedUpdateID)stored.get("RecentlyPlayedUpdateID");
        try {
            newRecentlyPlayedUpdateID = convertRecentlyPlayedUpdateID((String)getValue("string", values.get("RecentlyPlayedUpdateID")));
        } catch(RuntimeException e) {
            LOG.error("failed to read new value for RecentlyPlayedUpdateID, will ignore", e);
            // make sure the value is not changed/overridden
            newRecentlyPlayedUpdateID = null;
            oldRecentlyPlayedUpdateID = null;
        }
        if (!Objects.equal(oldRecentlyPlayedUpdateID, newRecentlyPlayedUpdateID)) {
            stored.put("RecentlyPlayedUpdateID", newRecentlyPlayedUpdateID);
        }

        UserRadioUpdateID newUserRadioUpdateID = null;
        UserRadioUpdateID oldUserRadioUpdateID = (UserRadioUpdateID)stored.get("UserRadioUpdateID");
        try {
            newUserRadioUpdateID = convertUserRadioUpdateID((String)getValue("string", values.get("UserRadioUpdateID")));
        } catch(RuntimeException e) {
            LOG.error("failed to read new value for UserRadioUpdateID, will ignore", e);
            // make sure the value is not changed/overridden
            newUserRadioUpdateID = null;
            oldUserRadioUpdateID = null;
        }
        if (!Objects.equal(oldUserRadioUpdateID, newUserRadioUpdateID)) {
            stored.put("UserRadioUpdateID", newUserRadioUpdateID);
        }

        SavedQueuesUpdateID newSavedQueuesUpdateID = null;
        SavedQueuesUpdateID oldSavedQueuesUpdateID = (SavedQueuesUpdateID)stored.get("SavedQueuesUpdateID");
        try {
            newSavedQueuesUpdateID = convertSavedQueuesUpdateID((String)getValue("string", values.get("SavedQueuesUpdateID")));
        } catch(RuntimeException e) {
            LOG.error("failed to read new value for SavedQueuesUpdateID, will ignore", e);
            // make sure the value is not changed/overridden
            newSavedQueuesUpdateID = null;
            oldSavedQueuesUpdateID = null;
        }
        if (!Objects.equal(oldSavedQueuesUpdateID, newSavedQueuesUpdateID)) {
            stored.put("SavedQueuesUpdateID", newSavedQueuesUpdateID);
        }

        SystemUpdateID newSystemUpdateID = null;
        SystemUpdateID oldSystemUpdateID = (SystemUpdateID)stored.get("SystemUpdateID");
        try {
            newSystemUpdateID = convertSystemUpdateID((Long)getValue("ui4", values.get("SystemUpdateID")));
        } catch(RuntimeException e) {
            LOG.error("failed to read new value for SystemUpdateID, will ignore", e);
            // make sure the value is not changed/overridden
            newSystemUpdateID = null;
            oldSystemUpdateID = null;
        }
        if (!Objects.equal(oldSystemUpdateID, newSystemUpdateID)) {
            stored.put("SystemUpdateID", newSystemUpdateID);
        }

        ShareIndexInProgress newShareIndexInProgress = null;
        ShareIndexInProgress oldShareIndexInProgress = (ShareIndexInProgress)stored.get("ShareIndexInProgress");
        try {
            newShareIndexInProgress = convertShareIndexInProgress((Boolean)getValue("boolean", values.get("ShareIndexInProgress")));
        } catch(RuntimeException e) {
            LOG.error("failed to read new value for ShareIndexInProgress, will ignore", e);
            // make sure the value is not changed/overridden
            newShareIndexInProgress = null;
            oldShareIndexInProgress = null;
        }
        if (!Objects.equal(oldShareIndexInProgress, newShareIndexInProgress)) {
            stored.put("ShareIndexInProgress", newShareIndexInProgress);
        }

        ShareListRefreshState newShareListRefreshState = null;
        ShareListRefreshState oldShareListRefreshState = (ShareListRefreshState)stored.get("ShareListRefreshState");
        try {
            newShareListRefreshState = convertShareListRefreshState((String)getValue("string", values.get("ShareListRefreshState")));
        } catch(RuntimeException e) {
            LOG.error("failed to read new value for ShareListRefreshState, will ignore", e);
            // make sure the value is not changed/overridden
            newShareListRefreshState = null;
            oldShareListRefreshState = null;
        }
        if (!Objects.equal(oldShareListRefreshState, newShareListRefreshState)) {
            stored.put("ShareListRefreshState", newShareListRefreshState);
        }

        ShareListUpdateID newShareListUpdateID = null;
        ShareListUpdateID oldShareListUpdateID = (ShareListUpdateID)stored.get("ShareListUpdateID");
        try {
            newShareListUpdateID = convertShareListUpdateID((String)getValue("string", values.get("ShareListUpdateID")));
        } catch(RuntimeException e) {
            LOG.error("failed to read new value for ShareListUpdateID, will ignore", e);
            // make sure the value is not changed/overridden
            newShareListUpdateID = null;
            oldShareListUpdateID = null;
        }
        if (!Objects.equal(oldShareListUpdateID, newShareListUpdateID)) {
            stored.put("ShareListUpdateID", newShareListUpdateID);
        }

        setEventedValues(stored);
        
        // after the values were updated, send the change notifications

        if (!Objects.equal(oldBrowseable, newBrowseable)) {
            notifyBrowseableChanged(oldBrowseable, newBrowseable);
        }

        if (!Objects.equal(oldShareIndexLastError, newShareIndexLastError)) {
            notifyShareIndexLastErrorChanged(oldShareIndexLastError, newShareIndexLastError);
        }

        if (!Objects.equal(oldContainerUpdateIDs, newContainerUpdateIDs)) {
            notifyContainerUpdateIDsChanged(oldContainerUpdateIDs, newContainerUpdateIDs);
        }

        if (!Objects.equal(oldRecentlyPlayedUpdateID, newRecentlyPlayedUpdateID)) {
            notifyRecentlyPlayedUpdateIDChanged(oldRecentlyPlayedUpdateID, newRecentlyPlayedUpdateID);
        }

        if (!Objects.equal(oldUserRadioUpdateID, newUserRadioUpdateID)) {
            notifyUserRadioUpdateIDChanged(oldUserRadioUpdateID, newUserRadioUpdateID);
        }

        if (!Objects.equal(oldSavedQueuesUpdateID, newSavedQueuesUpdateID)) {
            notifySavedQueuesUpdateIDChanged(oldSavedQueuesUpdateID, newSavedQueuesUpdateID);
        }

        if (!Objects.equal(oldSystemUpdateID, newSystemUpdateID)) {
            notifySystemUpdateIDChanged(oldSystemUpdateID, newSystemUpdateID);
        }

        if (!Objects.equal(oldShareIndexInProgress, newShareIndexInProgress)) {
            notifyShareIndexInProgressChanged(oldShareIndexInProgress, newShareIndexInProgress);
        }

        if (!Objects.equal(oldShareListRefreshState, newShareListRefreshState)) {
            notifyShareListRefreshStateChanged(oldShareListRefreshState, newShareListRefreshState);
        }

        if (!Objects.equal(oldShareListUpdateID, newShareListUpdateID)) {
            notifyShareListUpdateIDChanged(oldShareListUpdateID, newShareListUpdateID);
        }
    }


    public Browseable getLastValueForBrowseable() {
        return (Browseable)getEventedValueOrWait("Browseable");
    }

    public void addBrowseableListener(EventListener<Browseable> listener) {
        synchronized(_changeBrowseableListeners) {
            _changeBrowseableListeners.add(listener);
        }
    }

    public void removeBrowseableListener(EventListener<Browseable> listener) {
        synchronized(_changeBrowseableListeners) {
            _changeBrowseableListeners.remove(listener);
        }
    }

    protected void notifyBrowseableChanged(Browseable oldValue, Browseable newValue) {
        final Iterable<EventListener<Browseable>> listeners;
        synchronized(_changeBrowseableListeners) {
            listeners = new ArrayList<EventListener<Browseable>>(_changeBrowseableListeners);            
        }
        for(EventListener<Browseable> listener: listeners) {
            listener.valueChanged(oldValue, newValue);
        }
    }

    protected  Browseable convertBrowseable(Boolean rawValue) {
        return Browseable.getInstance(rawValue);
    }
    

    public ShareIndexLastError getLastValueForShareIndexLastError() {
        return (ShareIndexLastError)getEventedValueOrWait("ShareIndexLastError");
    }

    public void addShareIndexLastErrorListener(EventListener<ShareIndexLastError> listener) {
        synchronized(_changeShareIndexLastErrorListeners) {
            _changeShareIndexLastErrorListeners.add(listener);
        }
    }

    public void removeShareIndexLastErrorListener(EventListener<ShareIndexLastError> listener) {
        synchronized(_changeShareIndexLastErrorListeners) {
            _changeShareIndexLastErrorListeners.remove(listener);
        }
    }

    protected void notifyShareIndexLastErrorChanged(ShareIndexLastError oldValue, ShareIndexLastError newValue) {
        final Iterable<EventListener<ShareIndexLastError>> listeners;
        synchronized(_changeShareIndexLastErrorListeners) {
            listeners = new ArrayList<EventListener<ShareIndexLastError>>(_changeShareIndexLastErrorListeners);            
        }
        for(EventListener<ShareIndexLastError> listener: listeners) {
            listener.valueChanged(oldValue, newValue);
        }
    }

    protected  ShareIndexLastError convertShareIndexLastError(String rawValue) {
        return ShareIndexLastError.getInstance(rawValue);
    }
    

    public ContainerUpdateIDs getLastValueForContainerUpdateIDs() {
        return (ContainerUpdateIDs)getEventedValueOrWait("ContainerUpdateIDs");
    }

    public void addContainerUpdateIDsListener(EventListener<ContainerUpdateIDs> listener) {
        synchronized(_changeContainerUpdateIDsListeners) {
            _changeContainerUpdateIDsListeners.add(listener);
        }
    }

    public void removeContainerUpdateIDsListener(EventListener<ContainerUpdateIDs> listener) {
        synchronized(_changeContainerUpdateIDsListeners) {
            _changeContainerUpdateIDsListeners.remove(listener);
        }
    }

    protected void notifyContainerUpdateIDsChanged(ContainerUpdateIDs oldValue, ContainerUpdateIDs newValue) {
        final Iterable<EventListener<ContainerUpdateIDs>> listeners;
        synchronized(_changeContainerUpdateIDsListeners) {
            listeners = new ArrayList<EventListener<ContainerUpdateIDs>>(_changeContainerUpdateIDsListeners);            
        }
        for(EventListener<ContainerUpdateIDs> listener: listeners) {
            listener.valueChanged(oldValue, newValue);
        }
    }

    protected  ContainerUpdateIDs convertContainerUpdateIDs(String rawValue) {
        return ContainerUpdateIDs.getInstance(rawValue);
    }
    
    

    public RecentlyPlayedUpdateID getLastValueForRecentlyPlayedUpdateID() {
        return (RecentlyPlayedUpdateID)getEventedValueOrWait("RecentlyPlayedUpdateID");
    }

    public void addRecentlyPlayedUpdateIDListener(EventListener<RecentlyPlayedUpdateID> listener) {
        synchronized(_changeRecentlyPlayedUpdateIDListeners) {
            _changeRecentlyPlayedUpdateIDListeners.add(listener);
        }
    }

    public void removeRecentlyPlayedUpdateIDListener(EventListener<RecentlyPlayedUpdateID> listener) {
        synchronized(_changeRecentlyPlayedUpdateIDListeners) {
            _changeRecentlyPlayedUpdateIDListeners.remove(listener);
        }
    }

    protected void notifyRecentlyPlayedUpdateIDChanged(RecentlyPlayedUpdateID oldValue, RecentlyPlayedUpdateID newValue) {
        final Iterable<EventListener<RecentlyPlayedUpdateID>> listeners;
        synchronized(_changeRecentlyPlayedUpdateIDListeners) {
            listeners = new ArrayList<EventListener<RecentlyPlayedUpdateID>>(_changeRecentlyPlayedUpdateIDListeners);            
        }
        for(EventListener<RecentlyPlayedUpdateID> listener: listeners) {
            listener.valueChanged(oldValue, newValue);
        }
    }

    protected  RecentlyPlayedUpdateID convertRecentlyPlayedUpdateID(String rawValue) {
        return RecentlyPlayedUpdateID.getInstance(rawValue);
    }
    
    

    public UserRadioUpdateID getLastValueForUserRadioUpdateID() {
        return (UserRadioUpdateID)getEventedValueOrWait("UserRadioUpdateID");
    }

    public void addUserRadioUpdateIDListener(EventListener<UserRadioUpdateID> listener) {
        synchronized(_changeUserRadioUpdateIDListeners) {
            _changeUserRadioUpdateIDListeners.add(listener);
        }
    }

    public void removeUserRadioUpdateIDListener(EventListener<UserRadioUpdateID> listener) {
        synchronized(_changeUserRadioUpdateIDListeners) {
            _changeUserRadioUpdateIDListeners.remove(listener);
        }
    }

    protected void notifyUserRadioUpdateIDChanged(UserRadioUpdateID oldValue, UserRadioUpdateID newValue) {
        final Iterable<EventListener<UserRadioUpdateID>> listeners;
        synchronized(_changeUserRadioUpdateIDListeners) {
            listeners = new ArrayList<EventListener<UserRadioUpdateID>>(_changeUserRadioUpdateIDListeners);            
        }
        for(EventListener<UserRadioUpdateID> listener: listeners) {
            listener.valueChanged(oldValue, newValue);
        }
    }

    protected  UserRadioUpdateID convertUserRadioUpdateID(String rawValue) {
        return UserRadioUpdateID.getInstance(rawValue);
    }

    public SavedQueuesUpdateID getLastValueForSavedQueuesUpdateID() {
        return (SavedQueuesUpdateID)getEventedValueOrWait("SavedQueuesUpdateID");
    }

    public void addSavedQueuesUpdateIDListener(EventListener<SavedQueuesUpdateID> listener) {
        synchronized(_changeSavedQueuesUpdateIDListeners) {
            _changeSavedQueuesUpdateIDListeners.add(listener);
        }
    }

    public void removeSavedQueuesUpdateIDListener(EventListener<SavedQueuesUpdateID> listener) {
        synchronized(_changeSavedQueuesUpdateIDListeners) {
            _changeSavedQueuesUpdateIDListeners.remove(listener);
        }
    }

    protected void notifySavedQueuesUpdateIDChanged(SavedQueuesUpdateID oldValue, SavedQueuesUpdateID newValue) {
        final Iterable<EventListener<SavedQueuesUpdateID>> listeners;
        synchronized(_changeSavedQueuesUpdateIDListeners) {
            listeners = new ArrayList<EventListener<SavedQueuesUpdateID>>(_changeSavedQueuesUpdateIDListeners);            
        }
        for(EventListener<SavedQueuesUpdateID> listener: listeners) {
            listener.valueChanged(oldValue, newValue);
        }
    }

    protected  SavedQueuesUpdateID convertSavedQueuesUpdateID(String rawValue) {
        return SavedQueuesUpdateID.getInstance(rawValue);
    }
    
    
    
    
    

    public SystemUpdateID getLastValueForSystemUpdateID() {
        return (SystemUpdateID)getEventedValueOrWait("SystemUpdateID");
    }

    public void addSystemUpdateIDListener(EventListener<SystemUpdateID> listener) {
        synchronized(_changeSystemUpdateIDListeners) {
            _changeSystemUpdateIDListeners.add(listener);
        }
    }

    public void removeSystemUpdateIDListener(EventListener<SystemUpdateID> listener) {
        synchronized(_changeSystemUpdateIDListeners) {
            _changeSystemUpdateIDListeners.remove(listener);
        }
    }

    protected void notifySystemUpdateIDChanged(SystemUpdateID oldValue, SystemUpdateID newValue) {
        final Iterable<EventListener<SystemUpdateID>> listeners;
        synchronized(_changeSystemUpdateIDListeners) {
            listeners = new ArrayList<EventListener<SystemUpdateID>>(_changeSystemUpdateIDListeners);            
        }
        for(EventListener<SystemUpdateID> listener: listeners) {
            listener.valueChanged(oldValue, newValue);
        }
    }

    protected  SystemUpdateID convertSystemUpdateID(Long rawValue) {
        return SystemUpdateID.getInstance(rawValue);
    }

    public ShareIndexInProgress getLastValueForShareIndexInProgress() {
        return (ShareIndexInProgress)getEventedValueOrWait("ShareIndexInProgress");
    }

    public void addShareIndexInProgressListener(EventListener<ShareIndexInProgress> listener) {
        synchronized(_changeShareIndexInProgressListeners) {
            _changeShareIndexInProgressListeners.add(listener);
        }
    }

    public void removeShareIndexInProgressListener(EventListener<ShareIndexInProgress> listener) {
        synchronized(_changeShareIndexInProgressListeners) {
            _changeShareIndexInProgressListeners.remove(listener);
        }
    }

    protected void notifyShareIndexInProgressChanged(ShareIndexInProgress oldValue, ShareIndexInProgress newValue) {
        final Iterable<EventListener<ShareIndexInProgress>> listeners;
        synchronized(_changeShareIndexInProgressListeners) {
            listeners = new ArrayList<EventListener<ShareIndexInProgress>>(_changeShareIndexInProgressListeners);            
        }
        for(EventListener<ShareIndexInProgress> listener: listeners) {
            listener.valueChanged(oldValue, newValue);
        }
    }

    protected  ShareIndexInProgress convertShareIndexInProgress(Boolean rawValue) {
        return ShareIndexInProgress.getInstance(rawValue);
    }
    
    

    public ShareListRefreshState getLastValueForShareListRefreshState() {
        return (ShareListRefreshState)getEventedValueOrWait("ShareListRefreshState");
    }

    public void addShareListRefreshStateListener(EventListener<ShareListRefreshState> listener) {
        synchronized(_changeShareListRefreshStateListeners) {
            _changeShareListRefreshStateListeners.add(listener);
        }
    }

    public void removeShareListRefreshStateListener(EventListener<ShareListRefreshState> listener) {
        synchronized(_changeShareListRefreshStateListeners) {
            _changeShareListRefreshStateListeners.remove(listener);
        }
    }

    protected void notifyShareListRefreshStateChanged(ShareListRefreshState oldValue, ShareListRefreshState newValue) {
        final Iterable<EventListener<ShareListRefreshState>> listeners;
        synchronized(_changeShareListRefreshStateListeners) {
            listeners = new ArrayList<EventListener<ShareListRefreshState>>(_changeShareListRefreshStateListeners);            
        }
        for(EventListener<ShareListRefreshState> listener: listeners) {
            listener.valueChanged(oldValue, newValue);
        }
    }

    protected  ShareListRefreshState convertShareListRefreshState(String rawValue) {
        return ShareListRefreshState.getInstance(rawValue);
    }
    
    

    public ShareListUpdateID getLastValueForShareListUpdateID() {
        return (ShareListUpdateID)getEventedValueOrWait("ShareListUpdateID");
    }

    public void addShareListUpdateIDListener(EventListener<ShareListUpdateID> listener) {
        synchronized(_changeShareListUpdateIDListeners) {
            _changeShareListUpdateIDListeners.add(listener);
        }
    }

    public void removeShareListUpdateIDListener(EventListener<ShareListUpdateID> listener) {
        synchronized(_changeShareListUpdateIDListeners) {
            _changeShareListUpdateIDListeners.remove(listener);
        }
    }

    protected void notifyShareListUpdateIDChanged(ShareListUpdateID oldValue, ShareListUpdateID newValue) {
        final Iterable<EventListener<ShareListUpdateID>> listeners;
        synchronized(_changeShareListUpdateIDListeners) {
            listeners = new ArrayList<EventListener<ShareListUpdateID>>(_changeShareListUpdateIDListeners);            
        }
        for(EventListener<ShareListUpdateID> listener: listeners) {
            listener.valueChanged(oldValue, newValue);
        }
    }

    protected  ShareListUpdateID convertShareListUpdateID(String rawValue) {
        return ShareListUpdateID.getInstance(rawValue);
    }
    
}
